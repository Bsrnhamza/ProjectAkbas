@using ProjectAkbas.Models
@model ProformaMaliyetViewModel

<link href="~/css/bootstrap.css" rel="stylesheet">
<style>
    .table {
    margin: 0;
    width: 100%;
}

.table-responsive {
    overflow-x: auto;
}

.container {
    padding: 0;
    width: 100%;
    max-width: 100%;
    z-index: 1;
}

.pagination {
    margin: 0;
}

th, td {
    text-align: center;
    vertical-align: middle;
    padding: 8px;
}

    th {
        background-color: #ffffff;
        position: sticky;
        top: 55px;
        z-index: 10;
        border-bottom: 2px solid #dee2e6;
        box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
    }

    .header-group {
        background-color: #e9ecef;
        position: sticky;
        top: 110px;
        z-index: 9;
        border-bottom: 2px solid #dee2e6;
        box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
    }

.table th, .table td {
    background-color: #fff;
}

.qualities-m {
    background-color: rgba(173, 216, 230, 0.25);
}

.qualities-a {
    background-color: rgba(255, 255, 224, 0.25);
}

.qualities-n {
    background-color: rgba(144, 238, 144, 0.25);
}

</style>@* CSS KODLARIM*@
<table class="table table-hover">
    <thead>
        <tr>
            <th rowspan="2">Mal Grubu</th>
            <th rowspan="2">ID</th>
            <th rowspan="2">Sıra Benzer Kumaş</th>
            <th rowspan="2">Kumaş Kodu</th>
            <th rowspan="2">Kumaş Kalitesi</th>
            <th rowspan="2">Ham Kumaş Fiyatı (Mt)</th>
            <th rowspan="2">Grup Adı</th>
            <th rowspan="2">EN</th>
            <th rowspan="2">GRM</th>
            <th rowspan="2">DokumaOrme</th>
            <th rowspan="2">StokMiktarı</th>
            <th colspan="3">Domestic Price</th>
            <th colspan="3">Export Price</th>
            <th colspan="3">Cost Domestic</th>
            <th colspan="3">Cost Export</th>
            <th rowspan="2">Qualities</th>
            <th rowspan="2">Siparişte</th>
            <th rowspan="2">Zgroup</th>
            <th rowspan="2">Antrepoda</th>
            <th rowspan="2">LABST</th>
        </tr>
        <tr>
            @foreach (var header in new[] { "DYEING", "ROTARY", "DIGITAL" })
            {
                <th class="header-group">@header</th>
                <th class="header-group">@header</th>
                <th class="header-group">@header</th>
                <th class="header-group">@header</th>
               
            }
        </tr>
    </thead>

    <tbody>
        @foreach (var group in Model.ProformaMaliyetler.GroupBy(p => p.KumasKodu))
        {
            var firstItem = group.First();
            var malGrubuColor = GetMalGrubuColor(firstItem.MalGrubu);
            var qualitiesColor = GetQualitiesColor(firstItem.Qualities);

            <tr>
                <td style="background-color: @malGrubuColor;">@firstItem.MalGrubu</td>
                <td style="background-color: @qualitiesColor;">@firstItem.IDD</td>
                <td style="background-color: @qualitiesColor;">@firstItem.SiraBenzerKumas</td>
                <td style="background-color: @qualitiesColor;">@firstItem.KumasKodu</td>
                <td style="background-color: @qualitiesColor;">@firstItem.KumasKalitesi</td>
                <td style="background-color: @qualitiesColor;">@firstItem.HamKumasFiyatiMt</td>
                <td style="background-color: @qualitiesColor;">
                    @Html.Raw(GetKompOrmText(firstItem))
                </td>
                <td style="background-color: @qualitiesColor;">@firstItem.ZMML_EN</td>
                <td style="background-color: @qualitiesColor;">@firstItem.ZMML_GRM</td>
                <td style="background-color: @qualitiesColor;">@firstItem.DokumaOrme</td>
                <td style="background-color: @qualitiesColor;">@firstItem.StokMiktarı</td>

                @foreach (var priceType in new[] { "Düz Boya", "Baskı", "Dijital Baskı" })
                {
                    <td style="background-color: @qualitiesColor;">
                        @foreach (var item in group.Where(i => i.Islem == priceType))
                        {
                            <div>@item.YurticiDolarMetre</div>
                        }
                    </td>
                }

                @foreach (var priceType in new[] { "Düz Boya", "Baskı", "Dijital Baskı" })
                {
                    <td style="background-color: @qualitiesColor;">
                        @foreach (var item in group.Where(i => i.Islem == priceType))
                        {
                            <div>@item.YurtDisiDolarMetre</div>
                        }
                    </td>
                }

                @foreach (var costType in new[] { "Düz Boya", "Baskı", "Dijital Baskı" })
                {
                    <td style="background-color: @qualitiesColor;">
                        @foreach (var item in group.Where(i => i.Islem == costType))
                        {
                            <div>@item.ProfSFYurtici</div>
                        }
                    </td>
                }

                @foreach (var costType in new[] { "Düz Boya", "Baskı", "Dijital Baskı" })
                {
                    <td style="background-color: @qualitiesColor;">
                        @foreach (var item in group.Where(i => i.Islem == costType))
                        {
                            <div>@item.ProfSFYurtdisiIng</div>
                        }
                    </td>
                }

                <td style="background-color: @qualitiesColor;">@firstItem.Qualities</td>
                <td style="background-color: @qualitiesColor;">@firstItem.Sipariste</td>
                <td style="background-color: @qualitiesColor;">@firstItem.ZGRUP</td>
                <td style="background-color: @qualitiesColor;">@firstItem.Antrepoda</td>
                <td style="background-color: @qualitiesColor;">@firstItem.LABST</td>
            </tr>
        }
    </tbody>
</table>

<div class="d-flex justify-content-center mt-4">
    <ul class="pagination">
        @if (Model.PagingInfo.CurrentPage > 4)
        {
            <li class="page-item">
                <a class="page-link" href="@Url.Action("Index", new { pageNumber = 1 })">1</a>
            </li>
            <li class="page-item disabled">
                <span class="page-link">...</span>
            </li>
        }

        @for (int i = Math.Max(1, Model.PagingInfo.CurrentPage - 2); i <= Math.Min(Model.PagingInfo.TotalPages, Model.PagingInfo.CurrentPage + 2); i++)
        {
            <li class="page-item @(Model.PagingInfo.CurrentPage == i ? "active" : "")">
                <a class="page-link" href="@Url.Action("Index", new { pageNumber = i })">@i</a>
            </li>
        }

        @if (Model.PagingInfo.CurrentPage < Model.PagingInfo.TotalPages - 3)
        {
            <li class="page-item disabled">
                <span class="page-link">...</span>
            </li>
            <li class="page-item">
                <a class="page-link" href="@Url.Action("Index", new { pageNumber = Model.PagingInfo.TotalPages })">@Model.PagingInfo.TotalPages</a>
            </li>
        }
    </ul>
</div>

@functions {
    //DİNLEYİCİLER
    private string GetMalGrubuColor(string malGrubu)
    {
        return malGrubu switch
        {
            "Viscose" => "rgba(255, 165, 0, 0.5)",
            "Rayon" or "Ryn Signart" => "rgba(0, 128, 0, 0.5)",
            "Cotton" => "rgba(128, 0, 128, 0.5)",
            "Nylon" => "rgba(255, 255, 0, 0.5)",
            "Polyester" or "Pes Double" => "rgba(255, 0, 0, 0.5)",
            "Tencel" or "Modal" => "rgba(0, 0, 255, 0.5)",
            "Linen" => "rgba(173, 216, 230, 0.5)",
            "Jacquard" => "rgba(128, 128, 128, 0.5)",
            "Mix" or "Yarn Dyed" => "rgba(211, 211, 211, 0.5)",
            _ => "transparent"
        };
    }

    private string GetQualitiesColor(string qualities)
    {
        return qualities switch
        {
            "M" => "rgba(173, 216, 230, 0.25)",
            "A" or "S" => "rgba(255, 255, 180, 0.25)",
            "N" => "rgba(144, 238, 144, 0.25)",
            _ => "transparent"
        };
    }

    private string GetKompOrmText(ProformaMaliyetDto item)
    {
        var result = new List<string>();

        var kompOrms = new[]
        {
            item.ZKOMP_ORM1,
            item.ZKOMP_ORM2,
            item.ZKOMP_ORM3,
            item.ZKOMP_ORM4,
            item.ZKOMP_ORM5
    };
        var kompOrmsOran = new[]
        {
            item.ZKOMP_ORM_ORAN1,
            item.ZKOMP_ORM_ORAN2,
            item.ZKOMP_ORM_ORAN3,
            item.ZKOMP_ORM_ORAN4,
            item.ZKOMP_ORM_ORAN5
    };

        for (int i = 0; i < kompOrms.Length; i++)
        {
            if (!string.IsNullOrWhiteSpace(kompOrms[i]) && kompOrms[i] != "0" && kompOrms[i] != "000")
            {
                result.Add(kompOrms[i] + (string.IsNullOrWhiteSpace(kompOrmsOran[i]) || kompOrmsOran[i] == "0" || kompOrmsOran[i] == "000"
                    ? ""
                    : $" %{int.Parse(kompOrmsOran[i])}"));
            }
        }
        return string.Join("<br />", result);
    }
}